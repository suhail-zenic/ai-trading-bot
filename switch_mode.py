"""
Trading Mode Switcher
Safely switch between PAPER and LIVE trading modes
"""
import os
import sys
from pathlib import Path

BOLD = '\033[1m'
RED = '\033[91m'
GREEN = '\033[92m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
RESET = '\033[0m'

def read_env():
    """Read current .env file"""
    env_path = Path('.env')
    if not env_path.exists():
        return {}
    
    env_vars = {}
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                env_vars[key.strip()] = value.strip()
    return env_vars

def write_env(env_vars):
    """Write .env file"""
    with open('.env', 'w') as f:
        f.write("# AI Trading Bot Configuration\n")
        f.write("# Generated by switch_mode.py\n\n")
        
        # Trading mode
        f.write("# Trading Mode: 'paper' for simulation, 'live' for real trading\n")
        f.write(f"TRADING_MODE={env_vars.get('TRADING_MODE', 'paper')}\n\n")
        
        # Capital
        f.write("# Initial Capital (USDT)\n")
        f.write(f"INITIAL_CAPITAL={env_vars.get('INITIAL_CAPITAL', '10000')}\n\n")
        
        # API Keys
        f.write("# Binance API Credentials\n")
        f.write(f"BINANCE_API_KEY={env_vars.get('BINANCE_API_KEY', '')}\n")
        f.write(f"BINANCE_API_SECRET={env_vars.get('BINANCE_API_SECRET', '')}\n\n")
        
        # Risk Management
        f.write("# Risk Management (percentages as decimals)\n")
        f.write(f"STOP_LOSS_PCT={env_vars.get('STOP_LOSS_PCT', '0.015')}\n")
        f.write(f"TAKE_PROFIT_PCT={env_vars.get('TAKE_PROFIT_PCT', '0.04')}\n")
        f.write(f"MAX_POSITIONS={env_vars.get('MAX_POSITIONS', '2')}\n\n")
        
        # Trading Config
        f.write("# Trading Configuration\n")
        f.write(f"TRADING_PAIRS={env_vars.get('TRADING_PAIRS', 'BTC/USDT,ETH/USDT')}\n")
        f.write(f"TRADING_CYCLE_MINUTES={env_vars.get('TRADING_CYCLE_MINUTES', '30')}\n\n")
        
        # Add any other existing vars
        exclude_keys = {'TRADING_MODE', 'INITIAL_CAPITAL', 'BINANCE_API_KEY', 'BINANCE_API_SECRET',
                       'STOP_LOSS_PCT', 'TAKE_PROFIT_PCT', 'MAX_POSITIONS', 'TRADING_PAIRS', 'TRADING_CYCLE_MINUTES'}
        for key, value in env_vars.items():
            if key not in exclude_keys:
                f.write(f"{key}={value}\n")

def get_current_mode():
    """Get current trading mode"""
    env_vars = read_env()
    return env_vars.get('TRADING_MODE', 'paper')

def switch_to_paper():
    """Switch to paper trading mode"""
    print(f"\n{BLUE}{'='*60}{RESET}")
    print(f"{GREEN}{BOLD}Switching to PAPER TRADING mode...{RESET}")
    print(f"{BLUE}{'='*60}{RESET}\n")
    
    env_vars = read_env()
    env_vars['TRADING_MODE'] = 'paper'
    
    # Use default paper trading capital
    if not env_vars.get('INITIAL_CAPITAL'):
        env_vars['INITIAL_CAPITAL'] = '10000'
    
    write_env(env_vars)
    
    print(f"{GREEN}[OK] Successfully switched to PAPER TRADING mode{RESET}")
    print(f"\n{BOLD}Paper Trading Info:{RESET}")
    print(f"  • No real money will be used")
    print(f"  • Trades are simulated")
    print(f"  • Safe for testing strategies")
    print(f"  • Initial capital: ${env_vars.get('INITIAL_CAPITAL')} (simulated)")
    print(f"\n{YELLOW}To start trading: python run_bot.py{RESET}\n")

def switch_to_live():
    """Switch to live trading mode"""
    print(f"\n{RED}{'='*60}{RESET}")
    print(f"{RED}{BOLD}[WARN] SWITCHING TO LIVE TRADING MODE [WARN]{RESET}")
    print(f"{RED}{'='*60}{RESET}\n")
    
    env_vars = read_env()
    
    # Check API keys
    if not env_vars.get('BINANCE_API_KEY') or not env_vars.get('BINANCE_API_SECRET'):
        print(f"{RED}[ERROR] Binance API keys not configured!{RESET}")
        print(f"\n{YELLOW}Please add your API keys to .env file:{RESET}")
        print(f"  BINANCE_API_KEY=your_api_key")
        print(f"  BINANCE_API_SECRET=your_api_secret")
        print(f"\n{YELLOW}See SETUP_API_KEYS.md for instructions{RESET}\n")
        return False
    
    # Safety warnings
    print(f"{BOLD}[WARN] IMPORTANT WARNINGS:{RESET}")
    print(f"{RED}  • This will use REAL MONEY from your Binance account{RESET}")
    print(f"{RED}  • Losses are REAL and PERMANENT{RESET}")
    print(f"{RED}  • Make sure you understand the risks{RESET}")
    print(f"{RED}  • Start with SMALL amounts{RESET}")
    print(f"{RED}  • Monitor the bot closely{RESET}\n")
    
    print(f"{BOLD}Current Settings:{RESET}")
    print(f"  • Stop Loss: {float(env_vars.get('STOP_LOSS_PCT', 0.015))*100:.1f}%")
    print(f"  • Take Profit: {float(env_vars.get('TAKE_PROFIT_PCT', 0.04))*100:.1f}%")
    print(f"  • Max Positions: {env_vars.get('MAX_POSITIONS', '2')}")
    print(f"  • Trading Pairs: {env_vars.get('TRADING_PAIRS', 'BTC/USDT,ETH/USDT')}")
    print(f"  • Cycle Time: {env_vars.get('TRADING_CYCLE_MINUTES', '30')} minutes\n")
    
    # Triple confirmation
    print(f"{YELLOW}{BOLD}Type 'LIVE TRADING' to confirm (must match exactly):{RESET} ", end='')
    confirmation1 = input().strip()
    
    if confirmation1 != 'LIVE TRADING':
        print(f"\n{GREEN}[OK] Cancelled - staying in safe mode{RESET}\n")
        return False
    
    print(f"\n{RED}{BOLD}Are you ABSOLUTELY SURE? This uses REAL MONEY!{RESET}")
    print(f"{YELLOW}Type 'YES I UNDERSTAND THE RISKS' to proceed:{RESET} ", end='')
    confirmation2 = input().strip()
    
    if confirmation2 != 'YES I UNDERSTAND THE RISKS':
        print(f"\n{GREEN}[OK] Cancelled - staying in safe mode{RESET}\n")
        return False
    
    print(f"\n{RED}{BOLD}Final confirmation - Type 'CONFIRM' to activate live trading:{RESET} ", end='')
    confirmation3 = input().strip()
    
    if confirmation3 != 'CONFIRM':
        print(f"\n{GREEN}[OK] Cancelled - staying in safe mode{RESET}\n")
        return False
    
    # All confirmations passed - switch mode
    env_vars['TRADING_MODE'] = 'live'
    write_env(env_vars)
    
    print(f"\n{RED}{'='*60}{RESET}")
    print(f"{RED}{BOLD}[LIVE] LIVE TRADING MODE ACTIVATED{RESET}")
    print(f"{RED}{'='*60}{RESET}")
    print(f"\n{YELLOW}Your bot will now place REAL orders using REAL money!{RESET}")
    print(f"\n{BOLD}Next steps:{RESET}")
    print(f"  1. {YELLOW}Double-check your API key permissions (Spot Trading enabled){RESET}")
    print(f"  2. {YELLOW}Monitor your Binance account balance{RESET}")
    print(f"  3. {YELLOW}Start with: python run_bot.py{RESET}")
    print(f"  4. {RED}Watch the bot CLOSELY for first few trades{RESET}")
    print(f"  5. {RED}Keep stop-loss tight until you trust the strategy{RESET}\n")
    
    return True

def show_status():
    """Show current mode status"""
    current_mode = get_current_mode()
    env_vars = read_env()
    
    print(f"\n{BLUE}{'='*60}{RESET}")
    print(f"{BOLD}TRADING BOT STATUS{RESET}")
    print(f"{BLUE}{'='*60}{RESET}\n")
    
    if current_mode == 'live':
        print(f"{BOLD}Current Mode:{RESET} {RED}LIVE TRADING [LIVE]{RESET}")
        print(f"{RED}[WARN] Using REAL money!{RESET}\n")
    else:
        print(f"{BOLD}Current Mode:{RESET} {GREEN}PAPER TRADING [PAPER]{RESET}")
        print(f"{GREEN}[OK] Safe simulation mode{RESET}\n")
    
    print(f"{BOLD}Configuration:{RESET}")
    print(f"  Capital: ${env_vars.get('INITIAL_CAPITAL', '10000')}")
    print(f"  Stop Loss: {float(env_vars.get('STOP_LOSS_PCT', 0.015))*100:.1f}%")
    print(f"  Take Profit: {float(env_vars.get('TAKE_PROFIT_PCT', 0.04))*100:.1f}%")
    print(f"  Max Positions: {env_vars.get('MAX_POSITIONS', '2')}")
    print(f"  Trading Pairs: {env_vars.get('TRADING_PAIRS', 'BTC/USDT,ETH/USDT')}")
    print(f"  Cycle Time: {env_vars.get('TRADING_CYCLE_MINUTES', '30')} minutes")
    
    api_configured = bool(env_vars.get('BINANCE_API_KEY') and env_vars.get('BINANCE_API_SECRET'))
    print(f"  API Keys: {'[OK] Configured' if api_configured else '[X] Not configured'}\n")

def main():
    print(f"\n{BOLD}{BLUE}AI Trading Bot - Mode Switcher{RESET}\n")
    
    # Create .env if doesn't exist
    if not Path('.env').exists():
        print(f"{YELLOW}Creating .env file with default settings...{RESET}")
        write_env({'TRADING_MODE': 'paper', 'INITIAL_CAPITAL': '10000'})
    
    while True:
        show_status()
        
        print(f"{BOLD}Options:{RESET}")
        print(f"  {GREEN}1{RESET} - Switch to PAPER trading (safe)")
        print(f"  {RED}2{RESET} - Switch to LIVE trading (real money)")
        print(f"  3 - Show current status")
        print(f"  4 - Exit\n")
        
        choice = input(f"{BOLD}Select option (1-4):{RESET} ").strip()
        
        if choice == '1':
            switch_to_paper()
            break
        elif choice == '2':
            if switch_to_live():
                break
        elif choice == '3':
            continue
        elif choice == '4':
            print(f"\n{BLUE}Goodbye!{RESET}\n")
            break
        else:
            print(f"\n{RED}Invalid option. Please choose 1-4{RESET}\n")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print(f"\n\n{YELLOW}Cancelled by user{RESET}\n")
        sys.exit(0)

